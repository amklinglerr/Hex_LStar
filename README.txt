An implementation of Dana Angluin's L* Algorithm for exactly learning DFAs in polynomial time as explained in Chapter 8: "Learning Finite Automata by Experimentation" in "An Introduction to Computational Learning Theory" by Micheal J. Kearns and Umesh V. Vazirani. However, it has been slightly altered to fit with hex agents in the Hex World create by Professor Alfeld's 2024 SURF lab.

The files are as follows...

    Python files:
    direction_teacher.py -> subclass of teacher.py, used for a DFA that represents which direction the agent turns in, if it does
    hex_tester.py -> 
    hex_v2 -> 
    l_star_tester.py -> 
    learner.py -> 
    make_alphabet.py -> 
    movement_teacher.py -> 
    solver.py -> 
    teacher.py -> 
    test_points.py -> 

    Text files:
    alphabet.txt -> text file containing alphabet for the DFAs to use, generated by make_alphabet.py
    dfa.txt -> a default DFA to put into l_star_tester.py
    direction_dfa.txt -> 
    initial_state.txt -> 
    movement_dfa.txt -> 
    profile.txt -> 
    requirements.txt -> 

    Other:
    results.prof -> 

Python libraries required: 
    matplotlib, networkx (but only if you want to graph the DFAs, which is not recommended for learning large agents)
    tuna (for visualization  in graph form of profiling the code)
