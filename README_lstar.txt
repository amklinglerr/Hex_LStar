This is an implementation of Dana Angluin's L* Algorithm for exactly learning DFAs in polynomial time,
but adjusted to predict the actions of an agent in the Hex Simulator coded by Prof. Alfeld's SURF 2024 lab.

The files are as follows...

    Python files:
    direction_teacher.py -> subclass of teacher.py, used for a DFA that represents which direction the agent turns in, if it does
    hex_tester.py -> 
    hex_v2 -> 
    l_star_tester.py -> 
    learner.py -> 
    make_alphabet.py -> 
    movement_teacher.py -> 
    solver.py -> 
    teacher.py -> 
    test_points.py -> 

    Text files:
    alphabet.txt -> text file containing alphabet for the DFAs to use, generated by make_alphabet.py
    dfa.txt -> a default DFA to put into l_star_tester.py
    direction_dfa.txt -> 
    initial_state.txt -> 
    movement_dfa.txt -> 
    profile.txt -> 
    requirements.txt -> 

    Other:
    results.prof -> 

Python libraries required: 
    matplotlib, networkx (but only if you want to graph the DFAs, which is not recommended for learning large agents)
    tuna (for visualization  in graph form of profiling the code)